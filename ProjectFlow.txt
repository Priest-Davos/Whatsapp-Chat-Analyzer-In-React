
-> frontend installed using vite

-> create a virtual environment and activate it

-> Add a .gitignore file and write there .env

-> create a requirement.txt file Here list all required dependencies

->install all dependencies of requirement.txt file -------------> pip install -r requirement.txt

->creates a new Django project named "backend" -------------> django-admin startproject backend

-> cd to backend

->create a new Django app using the startapp command, -------------> python manage.py startapp ChatAnalyzerApi

+++++++++++++++++++++++++++++++++++++++++++++++++++
copy my settings .py 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++
(A) __________ work on Authentication first (Login) ________________________

-> Jwt token

Step 1: Install Django REST Framework and Django REST Framework-JWT
Alredy done as included in requirement.txt so dont install again
          code:
          pip install djangorestframework
          pip install djangorestframework_simplejwt

Step 2: Update settings.py      
        As Alredy copied mine settings .py so leave it 

Step 3: Create User Models
    If you're using Django's built-in User model, you’re all set.
    else If you need a custom user model, define it in models.py and set it as the default user model in settings.py. 

    Here, I'll use the default User model.

Step 4: User Serializer
  Create a serializer for user registration. 
    create serializers.py file in ChatAnalyzerApi folder
      code:-
            from django.contrib.auth.models import User  # Import the User model from Django's authentication system
            from rest_framework import serializers  # Import serializers from Django REST Framework

            class UserSerializer(serializers.ModelSerializer):  # Define a serializer for the User model
                class Meta:  # Meta class to specify metadata options
                    model = User  # Specify the User model for the serializer
                    fields = ["id", "username" ,"email",  "password"]  # Specify the fields to include in the serialized representation
                    extra_kwargs = {"password": {"write_only": True}}  # Specify additional options for the password field

                def create(self, validated_data):  # Method to create a new user
                    # Create a new user instance using the validated data
                    user = User.objects.create_user(**validated_data)
                    return user  # Return the newly created user instance

Step 5: Create Authentication Views  
  work in views.py in ChatAnalyzerApi
    code:-      
        from django.contrib.auth.models import User
        from .serializers import UserSerializer
        from rest_framework import generics
        from rest_framework.permissions import IsAuthenticated, AllowAny  # Import permission classes from Django REST Framework

        class CreateUserView(generics.CreateAPIView):
            queryset = User.objects.all()
            serializer_class = UserSerializer
            permission_classes = [AllowAny]



Step 6: URL Configuration
  Goto urls.py in backend asnd work here
    code:-
          from django.contrib import admin # Import the admin module
          from django.urls import path, include # Import functions for defining URL patterns 
          from ChatAnalyzerApi.views import CreateUserView # Import the CreateUserView class for user registration 
          from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView # Import views for JWT token management


            # Define URL patterns
          urlpatterns = [
                   path('admin/', admin.site.urls),  # Map the URL '/admin/' to the Django admin interface
                   path("ChatAnalyzerApi/user/register/", CreateUserView.as_view(), name="register"),  # Map the URL '/api/user/register/' to the CreateUserView for user registration
                   path("ChatAnalyzerApi/token/", TokenObtainPairView.as_view(), name="get_token"),  # Map the URL '/api/token/' to the TokenObtainPairView for obtaining JWT tokens
                   path("ChatAnalyzerApi/token/refresh/", TokenRefreshView.as_view(), name="refresh"),  # Map the URL '/api/token/refresh/' to the TokenRefreshView for refreshing JWT tokens
                   path("ChatAnalyzerApi-auth/", include("rest_framework.urls")),  # Include the Django REST Framework's authentication URLs
               ]

-> Now in terminal( cd to backened)
The makemigrations cmd is used to generate new migration files based on changes you have made to your models. These migration files define the operations that need to be applied to the database schema to make it match the changes you've made to your models.

------- python manage.py makemigrations
------- python manage.py migrate

------- python manage.py runserver

 ->Now go to route ---/ChatAnalyzerApi/user/register/
       ->create new user
       -> now goto  ---/ChatAnalyzerApi/token/ 
              ->generate access and refresh token by entering the user credential

token working ok

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 now will setup login page in frontend and  will use token to authenticate user
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
4th commit done

---------------------------- install some packages ------------------------------------

cd to whatsappChatAnalyzer
  install some packeges
     -> npm install axios react-router-dom jwt-decode

     for material ui pre-designed components
     -> npm install @mui/material @emotion/react @emotion/styled
     -> npm install @mui/icons-material

     -> npm install @radix-ui/themes
     Import the global CSS file at the root of your application.   
     -> import '@radix-ui/themes/styles.css';

    -> install and setup Tailwind css
        npm install -D tailwindcss  (in terminal)
        npx tailwindcss init (in terminal)

        Configure your template paths (will do later)
          Add the paths to all of your template files in your tailwind.config.js file.
        Add the Tailwind directives to your CSS
           update index.css
            code :-
                @tailwind base;
                @tailwind components;
                @tailwind utilities;


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Now Frontend organization and Axios setup(00:52:00)
  ->In src folder
      -> create some directories
          1> pages , 2> styles , 3> components
      
      ->create files
          1> constants.js , 2> api.js 

  -> In frotend directory 
      -> create .env file
        -> Here code :-
            VITE_API_URL="https://locahost:8080"

Now in constants.js defining constants for token keys,..
 to be used in managing JWT tokens for authentication in your application
    code :-
        export const ACCESS_TOKEN = "access";
        export const REFRESH_TOKEN = "refresh"

Now in api.js Add Interceptors to Attach Tokens: You can automatically attach tokens to all outgoing requests. This ensures that every API call made through Axios includes the necessary authentication headers
        code:-
            import axios from 'axios';
            import { ACCESS_TOKEN, REFRESH_TOKEN } from './constants'; // Assuming these are defined as shown previously

            // Create an instance of axios
            const api = axios.create({
                baseURL: import.meta.env.VITE_API_URL
            });

            // Request interceptor to attach the token to requests
            api.interceptors.request.use(
                (config) => {
                    const token = localStorage.getItem(ACCESS_TOKEN);
                    if (token) {
                        config.headers['Authorization'] = `Bearer ${token}`;
                    }
                    return config;
                },
                (error) => {
                    return Promise.reject(error);
                }
            );

            // // Response interceptor for handling global errors or token refresh logic
            // api.interceptors.response.use(
            //     response => response, // Just return the response if no errors
            //     error => {
            //         // Check if it's a token expiry error
            //         if (error.response.status === 401) {
            //             const refreshToken = localStorage.getItem(REFRESH_TOKEN);
            //             // You can add a function to handle token refresh
            //             return refreshTokenAndRetryRequest(refreshToken, error.config);
            //         }
            //         return Promise.reject(error);
            //     }
            // );

            // // Example function to handle refreshing of tokens
            // async function refreshTokenAndRetryRequest(refreshToken, originalRequest) {
            //     try {
            //         // API call to refresh token
            //         const response = await axios.post('http://your-api-url.com/refresh', { refreshToken });
            //         const { accessToken } = response.data;
            //         localStorage.setItem(ACCESS_TOKEN, accessToken); // Update the access token
            //         // Update the original request with new token
            //         originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;
            //         // Retry the original request with new token
            //         return api(originalRequest);
            //     } catch (refreshError) {
            //         localStorage.removeItem(ACCESS_TOKEN);
            //         localStorage.removeItem(REFRESH_TOKEN);
            //         // Redirect to login or do something else on token refresh failure
            //         return Promise.reject(refreshError);
            //     }
            // }

            export default api;

Now to get tokens and protect our routes 
    ->create a component ProtectedRoute.jsx in components folder
        code : -

            import { Navigate } from "react-router-dom";
            import { jwtDecode } from "jwt-decode";
            import api from "../api";
            import { REFRESH_TOKEN, ACCESS_TOKEN } from "../constants";
            import { useState, useEffect } from "react";

            function ProtectedRoute({ children }) {
                const [isAuthorized, setIsAuthorized] = useState(null);

                useEffect(() => {
                    // On component mount, check if the user is authorized
                    auth().catch(() => setIsAuthorized(false));
                }, []);

                const refreshToken = async () => {
                    try {
                        // Retrieve the refresh token from local storage
                        const refreshToken = localStorage.getItem(REFRESH_TOKEN);
                        // Request a new access token using the refresh token
                        const res = await api.post("/api/token/refresh/", {
                            refresh: refreshToken,
                        });
                        // If token refresh is successful, update the access token in local storage
                        if (res.status === 200) {
                            localStorage.setItem(ACCESS_TOKEN, res.data.access);
                            setIsAuthorized(true); // User is authorized
                        } else {
                            // Token refresh failed, set authorized to false
                            throw new Error("Token refresh failed");
                        }
                    } catch (error) {
                        // Log and handle token refresh errors
                        console.error("Error refreshing token:", error);
                        setIsAuthorized(false); // User is not authorized
                    }
                };

                const auth = async () => {
                    const token = localStorage.getItem(ACCESS_TOKEN);
                    if (!token) {
                        // If access token is not present, user is not authorized
                        setIsAuthorized(false);
                        return;
                    }
                    const decoded = jwtDecode(token);
                    const tokenExpiration = decoded.exp;
                    const now = Date.now() / 1000;

                    if (tokenExpiration < now) {
                        // Token has expired, attempt to refresh it
                        await refreshToken();
                    } else {
                        // Token is still valid, user is authorized
                        setIsAuthorized(true);
                    }
                };

                if (isAuthorized === null) {
                    // Loading state while authentication status is being determined
                    return <div>Loading...</div>;
                }

                // Render children if user is authorized, otherwise redirect to login
                return isAuthorized ? children : <Navigate to="/login" />;
            }

            export default ProtectedRoute;

5th commit here
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
update ProtectedRoute.jsx,api.js,constants.js to typescript format

6th commit
+++++++++++++++++++++++++++++++++
Now setup some navigation and pages
++++++++++++++++++++++++++++++++

->create some component in pages folder

Home.tsx
LandingLoginRegister.tsx
Login.tsx
Register.tsx
NotFound.tsx

if using vscode then install some extension to make code writing easy

write some initial code in all  created components (use shortcut .. tsrafce )
---------------------------------------------------------------------
Now setup App.tsx 
---------------------------------------------------------------------
        code:
            // Import necessary React and React Router components
            import React from "react";
            import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";

            import "./App.css"
            //import components
            // import LandingLoginRegister from "./pages/LandingLoginRegister";
            import Login from "./pages/Login";
            import Register from "./pages/Register";
            import Home from "./pages/Home";
            import NotFound from "./pages/NotFound";
            import ProtectedRoute from "./components/ProtectedRoute";
            import LandingLoginRegister from "./pages/LandingLoginRegister";

            // Logout component clears all stored tokens and navigates to login page
            const Logout: React.FC = () => {
              localStorage.clear(); // Clear all local storage items
              return <Navigate to="/Login-register" />; // Redirect to login page
            };

            // RegisterAndLogout component clears storage and renders the Register component
            const RegisterAndLogout: React.FC = () => {
              localStorage.clear(); // Clear all local storage items
              return <Register />; // Render Register page
            };

            // Main App component that defines the routing for the application
            const App: React.FC = () => {
              return (
                <BrowserRouter>
                  <Routes>

                    <Route
                      path="/" // Main route that is protected
                      element={
                        <ProtectedRoute> {/* Only allow access if user is authenticated*/}
                          <Home /> {/* Home component for authenticated users*/}
                        </ProtectedRoute>
                      }
                    />
                    <Route path ="/Login-register" element={<LandingLoginRegister/>} />
                    <Route path="/login" element={<Login />} /> {/* Route for the login page */}
                    <Route path="/logout" element={<Logout />} /> {/* Route for logging out */}
                    <Route path="/register" element={<RegisterAndLogout />} /> {/* Route for registration and logout */}
                    <Route path="*" element={<NotFound />}></Route> {/* Route for handling undefined paths */}

                  </Routes>
                </BrowserRouter>
              );
            };

            export default App;
------------------------------------------------------------------
I congigure tailwind.css as was not working (use chatgpt if face problem)
create a postcss.config.cjs
    copy paste my code as no logic
update index.css 
     @import 'tailwindcss/base';
     @import 'tailwindcss/components';
     @import 'tailwindcss/utilities';
     
---------------------------------------------------------------

created a background video online and paste in asset
->will use it later

install  react-icons package
--------------------------------------------------------------------------
->will create a background component which will render pages in it
like Login,Register, LandingLoginRegister etc 

->create a Background.tsx component
    code :-
          import React, { ReactNode } from 'react';
          import Bg from '../assets/Bg.mp4'; // Import the background video asset

          // Define the props expected by the Background component
          interface BackgroundProps {
            children: ReactNode; // Accept children elements
          }

          // Define the Background component
          const Background: React.FC<BackgroundProps> = ({ children }) => {
            return (
              // Outer div to contain the background video and provide styling
              <div className=" flex justify-center items-center h-screen">
                {/* Nested div for the video element */}
                <div className=" relative inset-0 w-full h-full">
                  {/* Video element to display the background video */}
                  <video

                    loop // Enable looping of the video
                    controls={false} // Disable controls for the video
                    muted // Mute the video
                    autoPlay // Enable auto play of the video
                    className="  w-full h-full object-cover" // Apply styling to the video element
                  >
                    {/* Specify the source of the video with the type attribute */}
                    <source src={Bg} type="video/mp4" />
                  </video>

                {/* Render children elements */}
                {children}

                </div>


              </div>
            );
          }

          export default Background;

_________________________________________________________________________
Now  basic work on  individual components    (will upgrade later on)
----------------------------------------------------------------------------   
-> NotFound.tsx   
      code :-
            import React from "react";
            import Background from "../components/Background";
            import { Link } from "react-router-dom";

            // Annotate the component as a React Functional Component
            const NotFound: React.FC = () => {
              return (
                <Background>
                <div className=" flex justify-center items-center opacity-75  dark:bg-slate-800 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-lg shadow-md  justify-center">
                  <div className="text-center text-white">
                    <h1 className="text-4xl font-bold mb-8">404 Not Found</h1>
                    <p className="text-lg mb-4">
                      Oops! The page you're looking for doesn't exist or has been moved.
                    </p>
                    <p className="text-lg mb-8">
                      Please check the URL or{" "}
                      <Link to="/" className="underline text-blue-300 hover:text-red-300">
                        navigate back to the homepage
                      </Link>
                      .
                    </p>
                    {/* <Link to="/" className="text-lg text-white underline">
                      Go to Homepage
                    </Link> */}
                  </div>
                </div>
                </Background>
              );
            }

            export default NotFound;



-> Create a LoadingIndicator component as will be required in future
    So Create a LoadingIndicator.tsx file in components
        code :-
              import "../styles/LoadingIndicator.css"
              const LoadingIndicator=()=> {
                return (
                  <div className="loader-container mb-5 ">
                  <div className="loader "></div>
              </div>

                );
              }
              export default LoadingIndicator;

-> create a LoadingIndicator.css in styles
           code:-
                 copy paste my code


-> Create a generic form to handle both login and register
  -> So create a Form.tsx component in components directory  
        code :-
            import { useState } from "react"; // Import the useState hook from React
            import api from "../api"; // Import the API abstraction for making HTTP requests
            import { useNavigate } from "react-router-dom"; // Import the useNavigate hook for navigation
            import { ACCESS_TOKEN, REFRESH_TOKEN } from "../constants"; // Import token constants
            import "../styles/Form.css"; // Import styles specific to forms
            import LoadingIndicator from "./LoadingIndicator"; // Import the loading indicator component
            import "../styles/LoadingIndicator.css"

            import Button from '@mui/material/Button';

            // Define the props expected by the Form component
            interface FormProps {
              route: string; // Route for making API requests
              method: "login" | "register"; // Method for the form (login or register)
            }

            // Define the Form component
            function Form({ route, method }: FormProps) {
                // Define state variables and functions to update them
                const [username, setUsername] = useState<string>(""); // State to store the username input
                const [email, setEmail] = useState<string>(""); // State to store the email input
                const [password, setPassword] = useState<string>(""); // State to store the password input
                const [loading, setLoading] = useState<boolean>(false); // State to handle the display of the loading indicator
                const navigate = useNavigate(); // Hook to navigate to different pages

                // Determine the title of the form based on the method
                const formTitle = method === "login" ? "Login" : "Register";

                // Define the function to handle form submission
                const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
                    setLoading(true); // Set loading to true to display the loading indicator
                    e.preventDefault(); // Prevent the default form submission behavior

                    try {
                        // If the method is register, make a POST request to register a new user
                        if (method === "register") {
                            await api.post(route, { username, email, password });
                            navigate("/login"); // Redirect to the login page after successful registration
                        } 
                        // If the method is login, make a POST request to log in the user
                        else if (method === "login") {
                            const response = await api.post(route, { username, password });
                            // Store access and refresh tokens in local storage
                            localStorage.setItem(ACCESS_TOKEN, response.data.access);
                            localStorage.setItem(REFRESH_TOKEN, response.data.refresh);
                            navigate("/"); // Redirect to the home page after successful login
                        }
                    } catch (error) {
                        // If there's an error, show an alert with the error message
                        if (error instanceof Error) {
                            alert(error.message);
                        }
                    } finally {
                        setLoading(false); // Set loading to false after the request is complete
                        setPassword("")
                        setUsername("")
                    }
                };

                // Render the form
                return (

                    <form onSubmit={handleSubmit} className="flex justify-center items-center opacity-75  dark:bg-slate-800 absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-lg shadow-md form-container justify-center">
                        <div className="  top-0 left-0    right-0 left-0 bottom-0 ">
                            <div className="text-center text-3xl font-bold mb-3  ">
                                <h1 className="text-white">{formTitle}</h1>
                            </div>
                            <input
                                className=" form-input  mb-4"
                                type="text"
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                placeholder="Username"

                            />
                            {method === 'register' && 
                            <input
                                className="  form-input mb-4"
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                placeholder="Email"
                            />}
                            <input
                                className=" form-input  mb-4 "
                                type="password"
                                value={password}

                                onChange={(e) => setPassword(e.target.value)}
                                placeholder="Password"
                            />

                            {/* Show loading indicator while processing the form submission */}  
                            {loading && <LoadingIndicator />}

                            {/* Submit button for the form */}
                            <Button className=" form-button mt-4" type="submit" variant="contained" color="success">
                                {formTitle}
                            </Button>

                        </div>
                    </form>

                );
            }

            export default Form;

------------------------------------------------------------------------
                        create styles for form
create form.css and copy paste my file
----------------------------------------------------------------------       


-> create a LandingLoginRegister Component which has 3 buttons
      for Login with email✅, register✅, Sign in  with google❌(later work)

create a LandingLoginRegister.tsx component
        -> create Routing for it in App.tsx(already done)
                  import LandingLoginRegister from "./pages/LandingLoginRegister";
                  <Route path ="/Login-register" element={<LandingLoginRegister/>} />
        -> Update navigate in ProtectedRoute.tsx
                  ++  return isAuthorized ? <>{children}</> : <Navigate to="/Login-register" />;
work here      
code :-
          import React from "react";
          import { useNavigate } from "react-router-dom";
          // import { useGoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline } from '@react-oauth/google';
          import { FcGoogle } from 'react-icons/fc';
          import { MdEmail } from "react-icons/md";

          import Background from "../components/Background";

          const LandingLoginRegister: React.FC = () => {
            const navigate = useNavigate();

            // This function will handle the Google login response
            // const responseGoogle = (response: GoogleLoginResponse | GoogleLoginResponseOffline) => {
            //   if ('accessToken' in response) {
            //     // Assuming your API needs a token, you'd include your API call logic here.
            //   }
            // };

            // Configuration for useGoogleLogin hook
            // const Googlelogin = useGoogleLogin({
            //   onSuccess: (response) => responseGoogle(response as GoogleLoginResponse),
            //   onError: (response) => console.error(response),
            // });

            return (
              <Background>
                <div className="absolute flex flex-col justify-center items-center top-0 right-0 left-0 bottom-0 bg-blackOverlay">
                  <div className="p-5">
                    <p></p>
                  </div>

                  <div className="shadow-2xl">
                    <button
                      type="button"
                      className="mb-7 w-full  bg-primary flex justify-center items-center p-3 rounded-lg cursor-pointer outline-none focus:outline-none hover:bg-blue-500 focus:bg-blue-500 text-black font-bold py-2 px-4 rounded"
                      onClick={() =>navigate('/login')}
                    ><MdEmail className="mr-4" /> Log in 
                    </button>
                    <button
                      type="button"
                      className=" w-full mb-7 bg-primary flex justify-center items-center p-3 rounded-lg cursor-pointer outline-none focus:outline-none hover:bg-blue-500 focus:bg-blue-500 text-black font-bold py-2 px-4 rounded"
                      onClick={() => navigate('/register')}
                    > 👤  Register
                    </button>
                    <button
                      type="button"
                      className="bg-white flex justify-center items-center p-3 rounded-lg cursor-pointer outline-none focus:outline-none hover:bg-blue-500 focus:bg-blue-500 text-black font-bold py-2 px-4 rounded"
                      // onClick={() => Googlelogin()}
                    >
                      <FcGoogle className="mr-4 " /> Sign in with google
                    </button>
                  </div>
                </div>
              </Background>
            );
          };

          export default LandingLoginRegister;

-----------------------------------------------------------------------------------
Now connecting the Login or register Form So
---------------------------------------------------------------------------
->  setup Register.tsx
    code:-
          import React from 'react'
          import Form from '../components/Form'
          import Background from '../components/Background'
          type Props = {}

          const Register = (props: Props) => {
            return (
            
             <Background>
                  <Form route="/ChatAnalyzerApi/user/register/" method="register" />
              </Background>

            )
          }         
          export default Register

->  setup Login.tsx
      code:-
            import Form from '../components/Form'
            import Background from '../components/Background'
            type Props = {}

            const Login = (props: Props) => {
              return (
                <Background>
                <Form route="/ChatAnalyzerApi/token/" method="login"></Form>
                </Background>
              )
            }

            export default Login

->update .env
      VITE_API_URL="http://127.0.0.1:8000/"


---------------------------------------------------------
7th commit
-----------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Now work in Home component

graphql, ant design, refine,Chakra UI, charjs
install some packages
      npm install antd
      npm install @chakra-ui/react @emotion/react @emotion/styled framer-motion
      npm install chart.js

----------------------------------------- ---------------------   
8th commit done
-------------------------------------------------------
create some components
     in pages-> About.tsx    ,  ChatDetails.tsx   , ChatUpload.tsx    ,  Graphs.tsx ,   HelpAndSupport.tsx  , OverallResult.tsx
               UserProfile.tsx 
        
     in components :-NavBar.tsx ,   Sidebar.tsx ,   Footer.tsx  ,   Chat.tsx ,  ChatList.tsx , LogoutButton.tsx ,  Upload.tsx                   
                     Settings.tsx          
    
    basic  code using tsrafce command


_________________________________________________________________________
Update Home.tsx
This is the main page

code:-
        import { Outlet } from 'react-router-dom';
        import React from 'react';
        import Navbar from '../components/Navbar';
        import Sidebar from '../components/Sidebar';
        
        const Home: React.FC = () => {
        
          return (
            <>
              <Navbar />
        
              <Sidebar>
              <Outlet/>
              </Sidebar>
            </>
          );
        };
        
        export default Home;

      
_____________________________________

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++      
work in individual created components and pages for Home or index   ( used ant Design for readymade components)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

work in Sidebar.tsx
used Ant Design Library

code :- 
          import React from 'react';
          import {PoweroffOutlined ,CustomerServiceOutlined ,SnippetsFilled ,WechatOutlined ,HomeOutlined , UploadOutlined, UserOutlined, VideoCameraOutlined ,AreaChartOutlined } from '@ant-design/icons';
          import {  Layout, Menu } from 'antd';
          import { Link } from 'react-router-dom';
          import { theme } from 'antd';
          import Footer from './Footer';

          const { Sider, Content } = Layout;

          interface SidebarProps {
            children: React.ReactNode;
          }

          const Sidebar: React.FC<SidebarProps> = ({ children }) => {
            const {
              token: { colorBgContainer, borderRadiusLG },
            } = theme.useToken();

            return (
              <Layout>
                <Sider
                  breakpoint="lg"
                  collapsedWidth="0"
                  onBreakpoint={(broken) => {
                    console.log(broken);
                  }}
                  onCollapse={(collapsed, type) => {

                    console.log(collapsed, type);
                  }}
                  style={{ height: '100vh', }}
                >
                  <div className="demo-logo-vertical" />
                  <Menu theme="dark" mode="inline" defaultSelectedKeys={['1']}>
                    <Menu.Item key="1" icon={<HomeOutlined />} >
                      <Link to="/">Home</Link>
                    </Menu.Item>

                    <Menu.Item key="2" icon={<VideoCameraOutlined />}>
                      <Link to="about">About</Link>
                    </Menu.Item>
                    <Menu.Item key="3" icon={<UploadOutlined />}>
                      <Link to="upload-chat">Upload Chat</Link>
                    </Menu.Item>
                    <Menu.Item key="4" icon={<WechatOutlined />}>
                    <Link to="chat-details">Chat Details</Link>
                    </Menu.Item>
                    <Menu.Item key="5" icon={<AreaChartOutlined />}>
                    <Link to="graphs-patterns">Graphs</Link>
                    </Menu.Item>
                    <Menu.Item key="6" icon={<SnippetsFilled  />}>
                    <Link to="overall-result"> Overall Result</Link>
                    </Menu.Item>
                    <Menu.Item key="7" icon={<CustomerServiceOutlined />}>
                    <Link to="help&support">Help & Support</Link>
                    </Menu.Item>
                    <Menu.Item key="8" icon={<PoweroffOutlined /> }>
                    <Link to="/logout">Logout</Link>
                    </Menu.Item>

                  </Menu>
                </Sider>
                <Layout>
                  <Content style={{ margin: '24px 16px 0 ' }}>
                    <div
                      style={{
                        padding: 24,
                        minHeight: 360,
                        background: colorBgContainer,
                        borderRadius: borderRadiusLG,
                        marginLeft:33,
                      }}
                    >
                      {children}
                    </div>
                  </Content>
                  <Footer/>
                </Layout>
              </Layout>
            );
          };

          export default Sidebar;


work in Navbar.tsx
          code :-
            import React from 'react';
            import { Layout, Menu } from 'antd';
            import {PoweroffOutlined, HomeOutlined, UploadOutlined, UserOutlined } from '@ant-design/icons';
            import { Link } from 'react-router-dom';
            import LogoutButton from './LogoutButton';

            const { Header } = Layout;
            
            const Navbar: React.FC = () => {
              return (
                <Header
                  style={{
                    position: 'sticky',
                    top: 0,
                    zIndex: 1,
                    width: '100%',
                    display: 'flex',
                    alignItems: 'center',
                  }}
                >
                  <div className="demo-logo" />
                  <Menu
                    theme="dark"
                    mode="horizontal"
                    defaultSelectedKeys={['1']}
                    style={{ flex: 1, minWidth: 0 }}
                  >
                    <Menu.Item key="1" icon={<HomeOutlined />}>
                      <Link to="/">Home</Link>
                    </Menu.Item>
                    <Menu.Item key="2" icon={<UploadOutlined />}>
                      <Link to="upload-chat">Upload</Link>
                    </Menu.Item>
                    <Menu.Item key="3" icon={<UserOutlined />}>
                      <Link to="user-profile">Profile</Link>
                    </Menu.Item>
                    <Menu.Item key="4" icon={<PoweroffOutlined />}>
                       <LogoutButton/>
                        {/* or */}
                        {/* <Link to="/Login-register">Logout</Link> */}
                    </Menu.Item>
                  </Menu>
                </Header>
              );
            };
            
            export default Navbar;
            
work in Footer.tsx
      code:
          import React from 'react';
          import { Layout } from 'antd';

          const { Footer: AntFooter } = Layout;

          const Footer: React.FC = () => {
            return (
              <AntFooter style={{ textAlign: 'center' }}>
               CopyRight ©{new Date().getFullYear()} 
               <div className='mt-5'>  Made with ❤️ by{' Priest Davos'}</div>

              </AntFooter>
            );
          };

          export default Footer;

Work in LogoutButton.tsx
      code:-
          import React from 'react';
          import { useNavigate } from 'react-router-dom';
          // import '../styles/LogoutButton.css';

          const LogoutButton: React.FC = () => {
              const navigate = useNavigate();
              const handleLogout = () => { 
                  localStorage.clear();      
                  navigate('/Login-register');
              };
              return (
                  <button onClick={handleLogout} className="logout-button">     Logout  </button>
              );
          };
          export default LogoutButton;

     create a LogoutButton css fileif want to give custom style

Basic work in Upload.tsx (component)  // src/components/Upload.tsx
        code:-
            import React from 'react';
            import { Upload, Button, message } from 'antd';
            import { UploadOutlined } from '@ant-design/icons';

            const UploadComponent: React.FC = () => {
              const props = {
                name: 'file',
                action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76', // Replace with your upload URL
                headers: {
                  authorization: 'authorization-text',
                },
                onChange(info: any) {
                  if (info.file.status !== 'uploading') {
                    console.log(info.file, info.fileList);
                  }
                  if (info.file.status === 'done') {
                    message.success(`${info.file.name} file uploaded successfully`);
                  } else if (info.file.status === 'error') {
                    message.error(`${info.file.name} file upload failed.`);
                  }
                },
              };

              return (
                <Upload {...props}>
                  <Button icon={<UploadOutlined />}>Upload File</Button>
                </Upload>
              );
            };

            export default UploadComponent;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 work later in  Chat.tsx , Settings.tsx ,  ChatList.tsx  ,Graphs.tsx  ,  Chat Details .tsx , ChatUpload.tsx,
   About.tsx , HelpAndSupport.tsx  , UserProfile.tsx , OverallResult.tsx , 
                
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Now configure routing in App.tsx for these newly created pages/components
App.tsx ++
    code b/w ++++.. line is updated code
  
    updated code:-

          // Import necessary React and React Router components
          import React from "react";
          import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";

          import "./App.css"
          //import components
          // import LandingLoginRegister from "./pages/LandingLoginRegister";
          import Login from "./pages/Login";
          import Register from "./pages/Register";
          import Home from "./pages/Home";
          import NotFound from "./pages/NotFound";
          import ProtectedRoute from "./components/ProtectedRoute";
          import LandingLoginRegister from "./pages/LandingLoginRegister";
        ++++++++++++++++++++++++++++++++++++++++++++
          // sub pages for Home 
          import About from "./pages/About";
          import Upload from "./pages/ChatUpload";
          import UserProfile from "./pages/UserProfile";
          import ChatDetails from "./pages/ChatDetails";
          import Graphs from "./pages/Graphs";
          import OverallResult from "./pages/OverallResult";
          import HelpAndSupport from "./pages/HelpAndSupport";
        +++++++++++++++++++++++++++++++++++++++++++++++++++++

          // Logout component clears all stored tokens and navigates to login page
          const Logout: React.FC = () => {
            localStorage.clear(); // Clear all local storage items
            return <Navigate to="/Login-register" />; // Redirect to login page
          };

          // RegisterAndLogout component clears storage and renders the Register component
          const RegisterAndLogout: React.FC = () => {
            localStorage.clear(); // Clear all local storage items
            return <Register />; // Render Register page
          };

          // Main App component that defines the routing for the application
          const App: React.FC = () => {
            return (
              <BrowserRouter>
                <Routes>
           +++++++++++++++++++++++++++++++++++
                <Route path="/" element={<Navigate to="/home" />} />
                  <Route
                    path="home" // Main route that is protected
                    element={
                      <ProtectedRoute> {/* Only allow access if user is authenticated*/}
                        <Home /> 
                      </ProtectedRoute>
                    }  
                  >
                    {/*Nested route for Home component */}
                    <Route index element={<div>Home Main Content</div>} />
                    <Route path="about" element={<About />} />
                    <Route path="upload-chat" element={<Upload />} />
                    <Route path="chat-details" element={<ChatDetails/>} />
                    <Route path="graphs-patterns" element={<Graphs/>} />
                    <Route path="overall-result" element={<OverallResult/>} />
                    <Route path="help&support" element={<HelpAndSupport/>} />


                    <Route path="user-profile" element={<UserProfile/>} />

                    </Route>
              +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  <Route path ="/Login-register" element={<LandingLoginRegister/>} />
                  <Route path="/login" element={<Login />} /> {/* Route for the login page */}
                  <Route path="/logout" element={<Logout />} /> {/* Route for logging out */}
                  <Route path="/register" element={<RegisterAndLogout />} /> {/* Route for registration and logout */}
                  <Route path="*" element={<NotFound />}></Route> {/* Route for handling undefined paths */}

                </Routes>
              </BrowserRouter>
            );
          };

          export default App;

very basic Homepge setup done with navigation will update some design etc later
-------------------------------------------------------------------
9th commit done
-------------------------------------------------------------------

In Home page ...  i am rendering sub  componnents /pages of home page  like analysis, chat detail etc using sidebar 
sections as Used <Link> to go to that section component there
So Home component contain only NavBar and SideBar + Outlet

---------------------------------------------------------

will work on uploading the file to server
---------------------------------------------------
here's a step-by-step guide for uploading a file from the frontend to a Django backend:

1. **Frontend Setup**:
   - Create a form or user interface in your frontend application to allow users to select a file for upload.
   - Use JavaScript to handle file selection and initiate the upload process.
   - Optionally, you can perform any necessary preprocessing or validation on the file before uploading it.

2. **Backend Setup**:
   - Ensure that your Django backend has a view or endpoint to handle file uploads. This typically involves creating a Django view or API endpoint using Django REST Framework.
   - Set up the necessary Django models, serializers, and views to handle file uploads and processing. Make sure to define the appropriate fields in your models to store file data.
   - Configure Django settings to allow file uploads and specify the upload directory.

3. **File Upload Process**:
   - When a user selects a file for upload in the frontend, use JavaScript to initiate an HTTP POST request to the backend endpoint for file upload.
   - Include the selected file as part of the POST request payload. Depending on your frontend framework or library, you may need to use FormData to construct the request payload.
   - Handle the file upload request in your Django backend view or API endpoint. Retrieve the uploaded file from the request data and process it as needed.
   - Perform any necessary validation, preprocessing, or cleanup of the uploaded file data. This may include tasks such as checking file size, file type, or performing data transformation.

4. **Response Handling**:
   - Once the file upload process is complete on the backend, return an appropriate response to the frontend indicating the success or failure of the upload operation.
   - Handle the response in your frontend application and provide feedback to the user based on the outcome of the upload operation.

5. **Error Handling and Security**:
   - Implement error handling mechanisms on both the frontend and backend to handle potential errors during the file upload process.
   - Ensure that your file upload process follows security best practices to prevent common vulnerabilities such as file upload attacks or directory traversal attacks.

By following these steps, you should be able to implement file upload functionality from the frontend to your Django backend successfully. Remember to consider factors such as file size, network bandwidth, and security when designing and implementing your file upload solution.

-------------------------------------------------------------------------------------------------------------
commit 10
---------------------------------------------
performing 
step 1 -> Frontend setup for file upload
        update Upload.tsx Component

    code:-
          import React from 'react';
          import { Upload, Button, message } from 'antd';
          import { UploadOutlined } from '@ant-design/icons';
          import api from '../api';

          const UploadComponent: React.FC = () => {
          
            const handleUpload = async (file: File) => {
              try {
                const formData = new FormData();
                formData.append('files', file);
                // console.log(file)

                // Make a POST request to the server to upload the file
                const response = await api.post('/ChatAnalyzerApi/upload/', formData, {
                  headers: {
                    'Content-Type': 'multipart/form-data', // Set content type to multipart/form-data
                  },
                });

                // Handle successful upload
                console.log('File uploaded successfully:', response.data);
                message.success(`${file.name} file uploaded successfully`);
              } 
              catch (error) {
                // Handle upload error
                console.error('Error uploading file:', error);
                message.error(`${file.name} file upload failed.`);
              }
            };

            const props = {
              beforeUpload: (file: File) => {
                handleUpload(file);
                return false; // Prevent default upload behavior
              },
            };

            return (
              <Upload {...props}>
                <Button icon={<UploadOutlined />}>Upload File</Button>
              </Upload>
            );
          };

          export default UploadComponent;

---------------------------------
commit 11
--------------------------------
Updated 2 line in upload component 
---formData.append('files', file);
---'Content-Type': 'multipart/form-data',
-------------------------------------
commit 12
----------------------------------------
performing
step 2, 3,4 
Note:- Below (3,4) creating a model and serializer for file  is optional
      as i also created a manual method for file upload locally in views.py
      you can remove the serializer code from views.py if want to manual save

1. configure Django settings
     code :-
        # for saving uploaded file
        import os
        
        BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        
        MEDIA_ROOT = os.path.join(BASE_DIR, 'uploadedFiles')
        MEDIA_URL = '/media/'     
2. configure urls.py
 create urls.py in ChatAnalyzerApi folder
    code :-
        from django.urls import path
        from . import views  # Import views module from the current directory

        urlpatterns = [
            path('upload/', views.FileUploadView.as_view(), name='file-upload'),
        ]

  connect this to backend / urls.py
  update backend /urls.py by adding path
    code:-       
        path("ChatAnalyzerApi/",include("ChatAnalyzerApi.urls")) #By including "api.urls", you're telling Django to include all URL patterns defined in the urls.py file of your api app. 

3. Define Django Models:(optional)
Let’s create a Model where we store the file path (as file) and file upload time (as uploaded_on). So the uploaded file will be stored in media folder and file field will contain it’s path.
  update models.py
    code :-
        from django.db import models
        from django.contrib.auth.models import User

        # Create your models here.
        class UploadedFile(models.Model):
             name = models.CharField(max_length=255)
             file = models.FileField()
             uploaded_at = models.DateTimeField(auto_now_add=True)
             owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="files")
             def __str__(self):
                return self.name
Now Run the migration
  In terminal:-
        python manage.py makemigrations
        python manage.py migrate


4. Define Django Serializers: (optional)
i wont as dont think i need
update serializers.py ++
  code:-
      from .models import UploadedFile

      class UploadedFileSerializer(serializers.ModelSerializer):
          class Meta:
              model = UploadedFile
              fields = ['name', 'file', 'uploaded_at','owner']
              read_only_fields = ('name', 'uploaded_at','owner')



5. Ensure Backend Endpoint for File Uploads:
  update views.py  ++
    code ++:-
        from django.http import JsonResponse
        from rest_framework.views import APIView
        from rest_framework.response import Response
        
        import os #for manually upload_file_locally
        from django.conf import settings #for manually upload_file_locally
        from .models import UploadedFile
        
        from rest_framework.parsers import FormParser, MultiPartParser
        
        
        class FileUploadView(APIView):
             # This method determines which note instances are returned on a GET request
            def get_queryset(self):
                user = self.request.user# Access the user from the request object (the user making the request)
                return UploadedFile.objects.filter(owner=user)# Filter and return only the files where the authenticated user is the owner
            
            parser_classes = (MultiPartParser, FormParser)
        
            def post(self, request, *args, **kwargs):
                files_responses = []
                uploaded_files = request.FILES.getlist('files')
                if not uploaded_files:
                    return Response({'error': 'No files uploaded.'}, status=status.HTTP_400_BAD_REQUEST)
        
                for file in uploaded_files:
                    
                    file_instance = UploadedFile(file=file)
                    file_instance.name = file.name  # Optionally set other fields like owner, if applicable
                    serializer = UploadedFileSerializer(file_instance, data={'file': file}, context={'request': request})
                    if serializer.is_valid():
                        serializer.save(owner=self.request.user)  # Save the model and file will be automatically handled
                        files_responses.append(serializer.data)
                        
                        # To manually upload file locally (optional)
                        # upload_file_locally(file)# dont need as  Django's FileField model field automatically handles saving
                        
                        # Additional file handling can be done here
                       
                        
                    else:
                        print("serializer not valid")
                        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
                
                return Response({'message': 'Files uploaded successfully', 'files': files_responses}, status=status.HTTP_201_CREATED)
            
        # Handle the logic to save or process the uploaded file
        # For example, save the file to a folder
        def upload_file_locally(file):
            upload_dir = os.path.join(settings.MEDIA_ROOT,file.name)
            if not os.path.exists(os.path.dirname(upload_dir)):
                    os.makedirs(os.path.dirname(upload_dir))
            with open(upload_dir, 'wb+') as destination:
                for chunk in file.chunks():
                    destination.write(chunk)
---------------------------------------------------
commit 13
-----------------------------------------------------     


